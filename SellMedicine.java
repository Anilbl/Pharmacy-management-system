package pharmacy_stock_management_system;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import common.OpenPdf;
import dao.PharmacyUtil;
import java.io.FileOutputStream;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.text.SimpleDateFormat;
import javax.swing.table.TableModel;
import java.util.Calendar;
import java.util.Date;
//import java.io.FileOutputStream;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Anil
 */
public class SellMedicine extends javax.swing.JFrame {

    public void bill() {
        String total = txttotal.getText();
    }

    public String numberPattern = "^[0-9]*$";
    public int finalTotalPrice = 0;
    private String sale_id = "";
    private String username = "";

    /**
     * Creates new form SellMedicine
     */
    public SellMedicine() {
        initComponents();
        filltable();
    }
    public void filltable() {
    try {
        Connection Con2 = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacy", "root", "Mych0ice@12345");
        DefaultTableModel model = (DefaultTableModel) medicineTable.getModel();
            
            model.setRowCount(0); 
            
            
            
        Statement st=Con2.createStatement();
            
             ResultSet rs5 = st.executeQuery("SELECT * FROM med_category");
            ResultSetMetaData rsmd=(ResultSetMetaData) rs5.getMetaData();
            DefaultTableModel model5 =(DefaultTableModel) medicineTable.getModel();
            
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i=0;    i<cols; i++){
                colName[i]=rsmd.getColumnName(i+1);
                model5.setColumnIdentifiers(colName);
                String id,name,amount,price,expire_date,manufacture_date,category;
                while(rs5.next()){
                    id = rs5.getString(1);
                    name = rs5.getString(2);
                    amount = rs5.getString(3);
                    price = rs5.getString(4);
                    expire_date = rs5.getString(5);
                    manufacture_date = rs5.getString(6);
                    category=rs5.getString(7);
                    String[] row = {id,name,amount,price,expire_date,manufacture_date,category};
                    model.addRow(row);
                }
                
            }

        st.close();
        Con2.close();

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage());
    }
}






    public SellMedicine(String tempUsername) {
        initComponents();
        username = tempUsername;
        setLocationRelativeTo(null);

    }

    private void medicineName(String nameOrMedicineID) {
    DefaultTableModel model = (DefaultTableModel) medicineTable.getModel();
    model.setColumnIdentifiers(new String[]{"Medicine ID", "Medicine Name"}); // Set column names
    model.setRowCount(0); // Clear previous data

    try {
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacy", "root", "Mych0ice@12345");
        Statement st = con.createStatement();
        ResultSet rs = st.executeQuery("SELECT * FROM med_category WHERE med_name LIKE '%" + nameOrMedicineID + "%' OR med_id LIKE '%" + nameOrMedicineID + "%'");

        while (rs.next()) {
            String id = rs.getString("med_id");
            String name = rs.getString("med_name");
            model.addRow(new Object[]{id, name}); // Add id and name to separate columns
        }
        
        st.close();
        con.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, e);
    }
}


    private void clearMedicineFields() {
        txtmedicineid.setText("");
        txtname.setText("");
        //txtcname.setText("");
        txtprice.setText("");
        txtnoofunit.setText("");
        txttotal.setText("");

    }

    public String getMedicineID(String prefix) {
        return prefix + System.nanoTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txttotalprice = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtsearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtmedicineid = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtname = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtprice = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtnoofunit = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        txtaddtocart = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        lblfinaltotalprice = new javax.swing.JLabel();
        txtpurchase = new javax.swing.JButton();
        txttotal = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        medicineTable = new javax.swing.JTable();
        search_txt = new rojerusan.RSMaterialButtonCircle();
        rSMaterialButtonCircle1 = new rojerusan.RSMaterialButtonCircle();

        txttotalprice.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txttotalprice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txttotalpriceActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setForeground(new java.awt.Color(204, 204, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(1320, 940));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Sell Medicine");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(517, 16, 261, -1));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, 80, 1360, 10));

        txtsearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtsearchKeyReleased(evt);
            }
        });
        jPanel1.add(txtsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 220, 40));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Medicine ID");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 140, 74, -1));

        txtmedicineid.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jPanel1.add(txtmedicineid, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 180, 198, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Name");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 220, 74, -1));

        txtname.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnameActionPerformed(evt);
            }
        });
        jPanel1.add(txtname, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 260, 199, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Price Per Unit");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 150, 85, -1));

        txtprice.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jPanel1.add(txtprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 180, 127, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("No. Of Units");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 210, 88, -1));

        txtnoofunit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtnoofunit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnoofunitActionPerformed(evt);
            }
        });
        txtnoofunit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtnoofunitKeyReleased(evt);
            }
        });
        jPanel1.add(txtnoofunit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 240, 127, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Total Price");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 270, -1, -1));

        cartTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine ID", "Name", "Price Per Unit", "No Of Units", "Total Price"
            }
        ));
        cartTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(cartTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 360, 850, 170));

        txtaddtocart.setText("Add to Cart");
        txtaddtocart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtaddtocartActionPerformed(evt);
            }
        });
        jPanel1.add(txtaddtocart, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 320, -1, -1));

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setText("RS.");
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 560, 53, -1));

        lblfinaltotalprice.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        lblfinaltotalprice.setText("00");
        jPanel1.add(lblfinaltotalprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 560, 80, -1));

        txtpurchase.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtpurchase.setText("Purchase and Print");
        txtpurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpurchaseActionPerformed(evt);
            }
        });
        jPanel1.add(txtpurchase, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 540, -1, 40));

        txttotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txttotalActionPerformed(evt);
            }
        });
        jPanel1.add(txttotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 290, 130, -1));

        medicineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        medicineTable.getTableHeader().setReorderingAllowed(false);
        medicineTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medicineTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(medicineTable);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 360, 410));

        search_txt.setText("search");
        search_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_txtActionPerformed(evt);
            }
        });
        jPanel1.add(search_txt, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 120, 130, 40));

        rSMaterialButtonCircle1.setText("back");
        rSMaterialButtonCircle1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSMaterialButtonCircle1ActionPerformed(evt);
            }
        });
        jPanel1.add(rSMaterialButtonCircle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 670, 190, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1455, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnameActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:

        medicineName("");
        txtmedicineid.setEditable(false);
        //txtcname.setEditable(false);
        txtprice.setEditable(false);
        txttotal.setEditable(false);
    }//GEN-LAST:event_formComponentShown

    private void txtsearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtsearchKeyReleased
        // TODO add your handling code here:
        String search = txtsearch.getText();
        medicineName(search);
    }//GEN-LAST:event_txtsearchKeyReleased

    private void txtnoofunitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnoofunitKeyReleased
        // TODO add your handling code here:
        String noofunit = txtnoofunit.getText();
    if (!noofunit.isEmpty()) {
        // Get the price per unit
        String price = txtprice.getText();
        if (!price.isEmpty()) {
            // Check if both number of units and price are valid numbers
            if (noofunit.matches(numberPattern) && price.matches("[0-9]+(\\.[0-9]+)?")) {
                // Calculate the total price
                double totalPrice = Double.parseDouble(noofunit) * Double.parseDouble(price);
                // Display the total price in the txttotal textbox
                txttotal.setText(String.format("%.2f", totalPrice));
            } else {
                JOptionPane.showMessageDialog(null, "Number of Units field is invalid or Price per Unit is invalid");
                txttotal.setText(""); // Clear txttotal if input is invalid
            }
        } else {
            JOptionPane.showMessageDialog(null, "Price per Unit field is empty");
            txttotal.setText(""); // Clear txttotal if price is empty
        }
    } else {
        txttotal.setText(""); // Clear txttotal if number of units is empty
    }
    }//GEN-LAST:event_txtnoofunitKeyReleased

    private void txtaddtocartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtaddtocartActionPerformed
    // TODO add your handling code here:
     String noofunit = txtnoofunit.getText();
    String medicineID = txtmedicineid.getText();

    if (!noofunit.isEmpty() && !medicineID.isEmpty()) {
        try {
            int medId = Integer.parseInt(medicineID);
            int amount = Integer.parseInt(noofunit);
            
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacy", "root", "Mych0ice@12345");
            PreparedStatement selectStatement = con.prepareStatement("SELECT * FROM med_category WHERE med_id = ?");
            selectStatement.setInt(1, medId);
            ResultSet rs = selectStatement.executeQuery();

            if (rs.next()) {
                int quantityAvailable = rs.getInt("med_amount");
                if (quantityAvailable >= amount) {
                    String medName = rs.getString("med_name");
                    float medPrice = rs.getFloat("med_price");
                    float total = amount * medPrice;
                    Date medExpireDate = rs.getDate("med_expired_date");
                    
                    // Insert sale record
                    String insertOrUpdateSaleQuery = "INSERT INTO med_sale (med_id, med_name, amount, med_price, total_price, med_expire_date, med_sale_date) "
                            + "VALUES (?, ?, ?, ?, ?, ?, NOW())";
                    PreparedStatement insertOrUpdateStatement = con.prepareStatement(insertOrUpdateSaleQuery);
                    insertOrUpdateStatement.setInt(1, medId);
                    insertOrUpdateStatement.setString(2, medName);
                    insertOrUpdateStatement.setInt(3, amount);
                    insertOrUpdateStatement.setFloat(4, medPrice);
                    insertOrUpdateStatement.setFloat(5, total);
                    insertOrUpdateStatement.setDate(6, new java.sql.Date(medExpireDate.getTime()));
                    insertOrUpdateStatement.executeUpdate();
                    
                    // Add to cart table
                    DefaultTableModel dtm = (DefaultTableModel) cartTable.getModel();
                    dtm.addRow(new Object[]{medId, medName, medPrice, amount, total});
                    finalTotalPrice += total;
                    lblfinaltotalprice.setText(String.valueOf(finalTotalPrice));
                    JOptionPane.showMessageDialog(null, "Added Successfully");
                } else {
                    JOptionPane.showMessageDialog(null, "Medicine is out of Stock. Only " + quantityAvailable + " Left");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Medicine not found with ID: " + medId);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid input for quantity or medicine ID");
        }
    } else {
        JOptionPane.showMessageDialog(null, "No Of Units and Medicine ID field is Required");
    }
    /*
    String noofunit = txtnoofunit.getText();
    String MedicineID = txtmedicineid.getText();

    if (!noofunit.isEmpty() && !MedicineID.isEmpty()) {
        String name = txtname.getText();
        String price = txtprice.getText();
        String totalprice = txttotal.getText();
        int checkStock = 0;
        int checkMedicineAlreadyExistIntCart = 0;

        try {
            int medId =Integer.parseInt(MedicineID);
            int amount = Integer.parseInt(noofunit);
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacy", "root", "Mych0ice@12345");
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM med_category WHERE med_id = " + MedicineID);
            String insertOrUpdateSaleQuery = "INSERT INTO med_sale (med_id, med_name, amount, med_price,total_price, med_expire_date, med_sale_date) "
                        + "VALUES (?, ?, ?, ?,?, ?, NOW()) ";
            if (rs.next()) {
                int quantityAvailable = rs.getInt("med_amount");
                if (quantityAvailable >= Integer.parseInt(noofunit)) {
                    checkStock = 1;
                    String medName = rs.getString("med_name");
                        float medPrice = rs.getFloat("med_price");
                        float total = rs.getFloat(txttotal);
                        Date medExpireDate = rs.getDate("med_expired_date");
                        PreparedStatement insertOrUpdateStatement = con.prepareStatement(insertOrUpdateSaleQuery);
                        insertOrUpdateStatement.setInt(1, medId);
                        insertOrUpdateStatement.setString(2, medName);
                        insertOrUpdateStatement.setInt(3, amount);
                        insertOrUpdateStatement.setFloat(4, medPrice);
                        insertOrUpdateStatement.setFloat(5, total);
                        insertOrUpdateStatement.setDate(6, (java.sql.Date) medExpireDate);
                        insertOrUpdateStatement.setInt(7, amount);
                        insertOrUpdateStatement.executeUpdate();
                    
                } else {
                    JOptionPane.showMessageDialog(null, "Medicine is out of Stock. Only " + quantityAvailable + " Left");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Medicine not found with ID: " + MedicineID);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

        if (checkStock == 1) {
            DefaultTableModel dtm = (DefaultTableModel) cartTable.getModel();
            for (int i = 0; i < cartTable.getRowCount(); i++) {
                if (Integer.parseInt(dtm.getValueAt(i, 0).toString()) == Integer.parseInt(MedicineID)) {
                    checkMedicineAlreadyExistIntCart = 1;
                    JOptionPane.showMessageDialog(null, "Medicine Already Exists in Cart");
                    break;
                }
            }

            if (checkMedicineAlreadyExistIntCart == 0) {
                dtm.addRow(new Object[]{MedicineID, name, price, noofunit, totalprice});
                finalTotalPrice += Double.parseDouble(totalprice);
                lblfinaltotalprice.setText(String.valueOf(finalTotalPrice));
                JOptionPane.showMessageDialog(null, "Added Successfully");
            }

            clearMedicineFields();
        }
        
    } else {
        JOptionPane.showMessageDialog(null, "No Of Units and Medicine ID field is Required");
    }
    */
    }//GEN-LAST:event_txtaddtocartActionPerformed

    private void cartTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartTableMouseClicked
        // TODO add your handling code here:
        int index = cartTable.getSelectedRow();
        int a = JOptionPane.showConfirmDialog(null, "Do You Want to Remove this Medicine", "select", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            TableModel model = cartTable.getModel();
            String total = model.getValueAt(index, 5).toString();
            finalTotalPrice = finalTotalPrice - Integer.parseInt(total);
            lblfinaltotalprice.setText(String.valueOf(finalTotalPrice));
            ((DefaultTableModel) cartTable.getModel()).removeRow(index);
        }
    }//GEN-LAST:event_cartTableMouseClicked

    private void txtpurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpurchaseActionPerformed
        // TODO add your handling code here:
        /*
        if (finalTotalPrice != 0) {
        // Initialize the sale ID
        sale_id = getMedicineID("Bill-");

        DefaultTableModel dtm = (DefaultTableModel) cartTable.getModel();
        int rowCount = cartTable.getRowCount();

        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacy", "root", "Mych0ice@12345");
            con.setAutoCommit(false); // Start a transaction

            for (int i = 0; i < rowCount; i++) {
                boolean isSelected = (boolean) dtm.getValueAt(i, 6); // Check if the medicine is selected
                
                if (isSelected) { // If the medicine is selected
                    int med_id = Integer.parseInt(dtm.getValueAt(i, 0).toString());
                    String med_name = dtm.getValueAt(i, 1).toString();
                    int amount = Integer.parseInt(dtm.getValueAt(i, 2).toString());
                    float med_price = Float.parseFloat(dtm.getValueAt(i, 3).toString());
                    Date med_expire_date = (Date) dtm.getValueAt(i, 4);
                    float total_price = Float.parseFloat(dtm.getValueAt(i, 5).toString());

                    // Update med_category table
                    PreparedStatement updateStatement = con.prepareStatement("UPDATE med_category SET med_amount = med_amount - ? WHERE med_id = ?");
                    updateStatement.setInt(1, amount);
                    updateStatement.setInt(2, med_id);
                    updateStatement.executeUpdate();

                    // Insert data into med_sale table
                    PreparedStatement insertStatement = con.prepareStatement("INSERT INTO med_sale (med_id, med_name, amount, med_price, med_expire_date, med_sale_date, total_price) VALUES (?, ?, ?, ?, ?, NOW(), ?)");
                    insertStatement.setInt(1, med_id);
                    insertStatement.setString(2, med_name);
                    insertStatement.setInt(3, amount);
                    insertStatement.setFloat(4, med_price);
                    insertStatement.setDate(5, new java.sql.Date(med_expire_date.getTime()));
                    insertStatement.setFloat(6, total_price);
                    insertStatement.executeUpdate();
                }
            }
            
//            con.commit(); // Commit the transaction
//            con.close(); // Close the connection

        } catch (SQLException e) {
            try {
                if ( con ! = null) {
            con.rollback();
            con.close(); // Close the connection after rollback
        }
    } 
            catch (SQLException ex) {
        // Handle rollback exception
        JOptionPane.showMessageDialog(null, "Error during rollback: " + ex.getMessage());
    }
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage());
        }
    */
        
        
        
if (finalTotalPrice != 0) {
         sale_id = getMedicineID("Bill-");

        DefaultTableModel dtm = (DefaultTableModel) cartTable.getModel();
        if (cartTable.getRowCount() != 0) {
            for (int i = 0; i < cartTable.getRowCount(); i++) {
                try {
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacy", "root", "Mych0ice@12345");
                    PreparedStatement updateStatement = con.prepareStatement("UPDATE med_category SET med_amount = med_amount - ? WHERE med_id = ?");
                    updateStatement.setInt(1, Integer.parseInt(dtm.getValueAt(i, 3).toString()));
                    updateStatement.setInt(2, Integer.parseInt(dtm.getValueAt(i, 0).toString()));
                    updateStatement.executeUpdate();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
        }/*

        try {
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    Date currentDate = new Date();
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacy", "root", "Mych0ice@12345");
    PreparedStatement selectStatement = con.prepareStatement("SELECT * FROM med_category where med_id =?");
    
    ResultSet resultSet = selectStatement.executeQuery();
    
    // Iterate through the ResultSet to retrieve data from med_category table
   while (resultSet.next()) {
    int med_id = resultSet.getInt("med_id");
    String med_name = resultSet.getString("med_name");
    int amount = resultSet.getInt("med_amount");
    float med_price = resultSet.getFloat("med_price");
    Date med_expire_date = resultSet.getDate("med_expired_date");
    String total_price_text = lblfinaltotalprice.getText();
    float total_price = Float.parseFloat(total_price_text);
    
    // Now, insert the retrieved data into med_sale table
    PreparedStatement insertStatement = con.prepareStatement("INSERT INTO med_sale(med_id, med_name, amount, med_price, med_expire_date, med_sale_date, total_price) VALUES (?, ?, ?, ?, ?, ?, ?)");
    insertStatement.setInt(1, med_id);  // Set med_id parameter
    insertStatement.setString(2, med_name);
    insertStatement.setInt(3, amount);
    insertStatement.setFloat(4, med_price);
    insertStatement.setDate(5, new java.sql.Date(med_expire_date.getTime()));
    insertStatement.setDate(6, new java.sql.Date(currentDate.getTime()));
    insertStatement.setFloat(7, total_price);
    
    // Execute the PreparedStatement to insert data into the med_sale table
    insertStatement.executeUpdate();
}

    
    // Close the connection
    con.close();
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, e);
}
        */
   

        // Create Bill
        com.itextpdf.text.Document doc = new com.itextpdf.text.Document();
        try {
            PdfWriter.getInstance(doc, new FileOutputStream(PharmacyUtil.billPath + sale_id + ".pdf"));
            doc.open();
            Paragraph pharmacyName = new Paragraph("Pharmacy Management System\n");
            doc.add(pharmacyName);
            doc.add(new Paragraph("****************************************************"));
            Paragraph details = new Paragraph("Sale ID: " + sale_id + "\nDate: " + new Date() + "\nTotal Paid: " + finalTotalPrice);
            doc.add(details);
            doc.add(new Paragraph("****************************************************"));
            PdfPTable tbl = new PdfPTable(5);
            tbl.addCell("Medicine ID");
            tbl.addCell("Name");
            tbl.addCell("Price Per Unit");
            tbl.addCell("No of Units");
            tbl.addCell("Sub Total Price");
            for (int i = 0; i < cartTable.getRowCount(); i++) {
                tbl.addCell(cartTable.getValueAt(i, 0).toString());
                tbl.addCell(cartTable.getValueAt(i, 1).toString());
                tbl.addCell(cartTable.getValueAt(i, 2).toString());
                tbl.addCell(cartTable.getValueAt(i, 3).toString());
                tbl.addCell(cartTable.getValueAt(i, 4).toString());
            }
            doc.add(tbl);
            doc.add(new Paragraph("****************************************************"));
            Paragraph thanksMsg = new Paragraph("Thank you! Please Visit Again");
            doc.add(thanksMsg);
            // Open PDF
            OpenPdf.OpenBYID(String.valueOf(sale_id));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        doc.close();
        setVisible(false);
        new SellMedicine(username).setVisible(true);
    } else {
        JOptionPane.showMessageDialog(null, "Please add some Medicine to the cart");
    }
    }//GEN-LAST:event_txtpurchaseActionPerformed

    private void txttotalpriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttotalpriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txttotalpriceActionPerformed

    private void txttotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txttotalActionPerformed

    private void medicineTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medicineTableMouseClicked
        // TODO add your handling code here:
         int index = medicineTable.getSelectedRow();
        TableModel model = medicineTable.getModel();
        String nameOrMedicineID = model.getValueAt(index, 0).toString();
        String MedicineID[] = nameOrMedicineID.split("-", 0);
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacy", "root", "Mych0ice@12345");
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from med_category where med_id = " + MedicineID[0] + " ");
            while (rs.next()) {
                txtmedicineid.setText(MedicineID[0]);
                txtname.setText(rs.getString("med_name"));
                //txtcname.setText(rs.getString("companyName"));
                txtprice.setText(rs.getString("med_price"));
                txtnoofunit.setText("");
                txttotal.setText("");

            }

        } 
        catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex);
        }

    }//GEN-LAST:event_medicineTableMouseClicked

    private void search_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_txtActionPerformed
        // TODO add your handling code here:
         String searchText = txtsearch.getText().trim();
    
    // Check if the search text is empty
    if (!searchText.isEmpty()) {
        try {
            // Establish connection to the database
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pharmacy", "root", "Mych0ice@12345");
            
            // Prepare the SQL query to search for med_id or med_name
            String query = "SELECT med_id, med_name, med_price FROM med_category WHERE med_id = ? OR med_name = ?";
            PreparedStatement pst = con.prepareStatement(query);
            
            // Bind the search text to the query parameters
            pst.setString(1, searchText);
            pst.setString(2, searchText);
            
            // Execute the query
            ResultSet rs = pst.executeQuery();
            
            // Check if any results were returned
            if (rs.next()) {
                // Update the text fields with the retrieved values
                txtmedicineid.setText(rs.getString("med_id"));
                txtname.setText(rs.getString("med_name"));
                txtprice.setText(rs.getString("med_price"));
            } else {
                // If no results were found, display a message
                JOptionPane.showMessageDialog(this, "No medicine found with ID or Name: " + searchText);
            }
            
            // Close the database connection
            pst.close();
            con.close();
        } catch (SQLException e) {
            // Handle any SQL exceptions
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage());
        }
    } else {
        // If the search text is empty, prompt the user to enter a value
        JOptionPane.showMessageDialog(this, "Please enter a medicine ID or Name to search.");
    }
        
    }//GEN-LAST:event_search_txtActionPerformed

    private void rSMaterialButtonCircle1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSMaterialButtonCircle1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        menu obj = new menu();
        obj.setVisible(true);
    }//GEN-LAST:event_rSMaterialButtonCircle1ActionPerformed

    private void txtnoofunitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtnoofunitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtnoofunitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SellMedicine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable cartTable;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblfinaltotalprice;
    private javax.swing.JTable medicineTable;
    private rojerusan.RSMaterialButtonCircle rSMaterialButtonCircle1;
    private rojerusan.RSMaterialButtonCircle search_txt;
    private javax.swing.JButton txtaddtocart;
    private javax.swing.JTextField txtmedicineid;
    private javax.swing.JTextField txtname;
    private javax.swing.JTextField txtnoofunit;
    private javax.swing.JTextField txtprice;
    private javax.swing.JButton txtpurchase;
    private javax.swing.JTextField txtsearch;
    private javax.swing.JTextField txttotal;
    private javax.swing.JTextField txttotalprice;
    // End of variables declaration//GEN-END:variables
}
